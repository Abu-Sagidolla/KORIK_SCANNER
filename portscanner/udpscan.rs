use futures::StreamExt;
use std::net::Ipv4Addr;
use std::sync::{Arc, Mutex};
use tokio::net::UdpSocket;
use tokio::time::{timeout, Duration};

use indicatif::{ProgressBar, ProgressStyle};

pub async fn udp_scan(target: Ipv4Addr, port: u16) -> Option<u16> {
    let payload = match port {
        53 => vec![
            0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x77,
            0x77, 0x77, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d,
            0x00, 0x00, 0x01, 0x00, 0x01,
        ],
        137 => vec![
            0x01, 0x91, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x43,
            0x4b, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
            0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
            0x41, 0x41, 0x41, 0x00, 0x00, 0x21, 0x00, 0x01,
        ],
        1434 => vec![0x02],
        1604 => vec![
            0x2a, 0x00, 0x01, 0x32, 0x02, 0xfd, 0xa8, 0xe3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21,
            0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ],
        260 | 3401 => vec![
            0x30, 0x3a, 0x02, 0x01, 0x03, 0x30, 0x0f, 0x02, 0x02, 0x4a, 0x69, 0x02, 0x03, 0x00,
            0xff, 0xe3, 0x04, 0x01, 0x04, 0x02, 0x01, 0x03, 0x04, 0x10, 0x30, 0x0e, 0x04, 0x00,
            0x02, 0x01, 0x00, 0x02, 0x01, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x30, 0x12,
            0x04, 0x00, 0x04, 0x0a, 0x0c, 0x02, 0x02, 0x37, 0xf0, 0x02, 0x01, 0x00, 0x02, 0x01,
            0x00, 0x30, 0x00, 0x30, 0x1f, 0x02, 0x01, 0x00, 0x04, 0x06, 0x70, 0x75, 0x62, 0x6c,
            0x69, 0x63, 0xa1, 0x12, 0x02, 0x01, 0x00, 0x02, 0x01, 0x00, 0x02, 0x01, 0x00, 0x30,
            0x07, 0x30, 0x05, 0x06, 0x01, 0x00, 0x05, 0x00,
        ],
        123 => vec![
            0xe3, 0x00, 0x04, 0xfa, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc5, 0x4f, 0x23, 0x4b,
            0x71, 0xb1, 0x52, 0xf3, 0xd9, 0x00, 0x0a, 0xfa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
            0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0xc6, 0xf1, 0x5e, 0xdb, 0x78, 0x00, 0x00,
        ],

        500 => vec![
            0x30, 0x30, 0x31, 0x31, 0x32, 0x32, 0x33, 0x33, 0x34, 0x34, 0x35, 0x35, 0x36, 0x36,
            0x37, 0x37, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
            0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x30, 0x30, 0x32, 0x30, 0x30, 0x30, 0x30,
            0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x63, 0x30,
            0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x61, 0x34, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
            0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30,
            0x30, 0x30, 0x39, 0x38, 0x30, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x34, 0x30, 0x33,
            0x30, 0x30, 0x30, 0x30, 0x32, 0x34, 0x30, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30,
            0x38, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x35, 0x38, 0x30, 0x30, 0x32, 0x30, 0x30,
            0x30, 0x32, 0x38, 0x30, 0x30, 0x33, 0x30, 0x30, 0x30, 0x31, 0x38, 0x30, 0x30, 0x34,
            0x30, 0x30, 0x30, 0x32, 0x38, 0x30, 0x30, 0x62, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30,
            0x30, 0x63, 0x30, 0x30, 0x30, 0x34, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31,
            0x30, 0x33, 0x30, 0x30, 0x30, 0x30, 0x32, 0x34, 0x30, 0x32, 0x30, 0x31, 0x30, 0x30,
            0x30, 0x30, 0x38, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x35, 0x38, 0x30, 0x30, 0x32,
            0x30, 0x30, 0x30, 0x31, 0x38, 0x30, 0x30, 0x33, 0x30, 0x30, 0x30, 0x31, 0x38, 0x30,
            0x30, 0x34, 0x30, 0x30, 0x30, 0x32, 0x38, 0x30, 0x30, 0x62, 0x30, 0x30, 0x30, 0x31,
            0x30, 0x30, 0x30, 0x63, 0x30, 0x30, 0x30, 0x34, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
            0x30, 0x31, 0x30, 0x33, 0x30, 0x30, 0x30, 0x30, 0x32, 0x34, 0x30, 0x33, 0x30, 0x31,
            0x30, 0x30, 0x30, 0x30, 0x38, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x31, 0x38, 0x30,
            0x30, 0x32, 0x30, 0x30, 0x30, 0x32, 0x38, 0x30, 0x30, 0x33, 0x30, 0x30, 0x30, 0x31,
            0x38, 0x30, 0x30, 0x34, 0x30, 0x30, 0x30, 0x32, 0x38, 0x30, 0x30, 0x62, 0x30, 0x30,
            0x30, 0x31, 0x30, 0x30, 0x30, 0x63, 0x30, 0x30, 0x30, 0x34, 0x30, 0x30, 0x30, 0x30,
            0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x32, 0x34, 0x30, 0x34,
            0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x38, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x31,
            0x38, 0x30, 0x30, 0x32, 0x30, 0x30, 0x30, 0x31, 0x38, 0x30, 0x30, 0x33, 0x30, 0x30,
            0x30, 0x31, 0x38, 0x30, 0x30, 0x34, 0x30, 0x30, 0x30, 0x32, 0x38, 0x30, 0x30, 0x62,
            0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x63, 0x30, 0x30, 0x30, 0x34, 0x30, 0x30,
            0x30, 0x30, 0x30, 0x30, 0x30, 0x31,
        ],
        389 => vec![
            0x30, 0x25, 0x02, 0x01, 0x01, 0x63, 0x20, 0x04, 0x00, 0x0a, 0x01, 0x00, 0x0a, 0x01,
            0x00, 0x02, 0x01, 0x00, 0x02, 0x01, 0x00, 0x01, 0x01, 0x00, 0x87, 0x0b, 0x6f, 0x62,
            0x6a, 0x65, 0x63, 0x74, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x30, 0x00,
        ],
        111 => vec![
            0x65, 0x72, 0x0a, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01,
            0x86, 0xa0, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ],
        5632 => vec![0x35, 0x33, 0x35, 0x34, 0x35, 0x33, 0x35, 0x34],
        27015 | 27030 => vec![
            0xff, 0xff, 0xff, 0xff, 0x54, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x45, 0x6e,
            0x67, 0x69, 0x6e, 0x65, 0x20, 0x51, 0x75, 0x65, 0x72, 0x79, 0x00,
        ],
        3389 => vec![
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00,
        ],
        37810 => vec![0xff],
        5093 => vec![0x7a, 0x00, 0x00, 0x00, 0x00, 0x00],
        6881 => vec![
            0x64, 0x31, 0x3a, 0x61, 0x64, 0x32, 0x3a, 0x69, 0x64, 0x32, 0x30, 0x3a, 0x61, 0x62,
            0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35,
            0x36, 0x37, 0x38, 0x39, 0x39, 0x3a, 0x71, 0x39, 0x3a, 0x66, 0x69, 0x6e, 0x64, 0x5f,
            0x6e, 0x6f, 0x64, 0x65, 0x31, 0x3a, 0x74, 0x32, 0x3a, 0x61, 0x61, 0x31, 0x3a, 0x79,
            0x31, 0x3a, 0x71, 0x65,
        ],
        80 => vec![0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        7001 => vec![
            0x00, 0x00, 0x03, 0xe7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00,
        ],
        53413 => vec![0x0a],
        5351 => vec![0x00, 0x00],
        41794 => vec![0x14],
        18753 => vec![
            0x01, 0x91, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x20, 0x43, 0x4b, 0x41,
            0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
            0x41, 0x41, 0x41, 0x41, 0x00, 0x00, 0x21, 0x00, 0x01,
        ],
        3478 | 8088 | 37833 => vec![
            0x00, 0x01, 0x00, 0x00, 0x21, 0x12, 0xa4, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ],
        1900 => vec![
            0x4d, 0x2d, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x20, 0x2a, 0x20, 0x48, 0x54, 0x54,
            0x50, 0x2f, 0x31, 0x2e, 0x31, 0x0d, 0x0a, 0x48, 0x75, 0x73, 0x74, 0x3a, 0x20, 0x31,
            0x39, 0x32, 0x2e, 0x31, 0x36, 0x38, 0x2e, 0x31, 0x2e, 0x31, 0x32, 0x31, 0x3a, 0x31,
            0x39, 0x30, 0x31, 0x0d, 0x0a, 0x4d, 0x61, 0x6e, 0x3a, 0x20, 0x72, 0x69, 0x64, 0x75,
            0x6c, 0x3a, 0x73, 0x3a, 0x75, 0x75, 0x69, 0x64, 0x3a, 0x64, 0x64, 0x66, 0x32, 0x33,
            0x36, 0x34, 0x30, 0x2d, 0x34, 0x30, 0x62, 0x32, 0x2d, 0x34, 0x64, 0x36, 0x35, 0x2d,
            0x61, 0x39, 0x30, 0x64, 0x2d, 0x65, 0x39, 0x35, 0x38, 0x32, 0x34, 0x63, 0x66, 0x38,
            0x31, 0x30, 0x33, 0x0d, 0x0a, 0x53, 0x54, 0x3a, 0x20, 0x70, 0x72, 0x61, 0x6d, 0x65,
            0x3a, 0x75, 0x72, 0x69, 0x64, 0x3a, 0x73, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x3a,
            0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x3a, 0x65, 0x6f, 0x6a, 0x66, 0x67, 0x39, 0x6e,
            0x7a, 0x64, 0x0d, 0x0a,
        ],
        30120 => vec![
            0xff, 0xff, 0xff, 0xff, 0x67, 0x65, 0x74, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
        ],
        27666 => vec![
            0x83, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ],
        11211 => vec![
            0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
        ],
        5353 => vec![
            0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x5f,
            0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x07, 0x5f, 0x64, 0x6e, 0x73, 0x2d,
            0x73, 0x64, 0x04, 0x5f, 0x75, 0x64, 0x70, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x00,
            0x00, 0x0c, 0x80, 0x01,
        ],
        7 => vec![0x0b, 0x01, 0x00, 0x03],
        19 => vec![0x0e, 0x0f, 0x00],
        520 => vec![
            0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10,
        ],
        1090 => vec![
            0x05, 0x00, 0x0b, 0x03, 0x10, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x01, 0x00,
            0x00, 0x00, 0xb8, 0x10, 0xb8, 0x10, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x01, 0x00, 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0x01, 0x23,
            0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0xe7, 0x03, 0x00, 0x00, 0xfe, 0xdc, 0xba, 0x98,
            0x76, 0x54, 0x32, 0x10, 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0xe7, 0x03,
            0x00, 0x00,
        ],
        10080 => vec![
            0x41, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x20, 0x32, 0x2e, 0x36, 0x20, 0x52, 0x45, 0x51,
            0x20, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x20, 0x30, 0x30, 0x30, 0x2d, 0x30, 0x30,
            0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x53, 0x45, 0x51, 0x20, 0x30, 0x0a, 0x53,
            0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x20, 0x6e, 0x6f, 0x6f, 0x70, 0x0a,
        ],
        427 => vec![
            0x02, 0x01, 0x00, 0x00, 0x36, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02,
            0x65, 0x6e, 0x00, 0x00, 0x00, 0x15, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x3a,
            0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x00,
            0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x00, 0x00, 0x00, 0x00,
        ],
        1101 | 1045 => vec![
            0x05, 0x00, 0x0b, 0x03, 0x10, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x01, 0x00,
            0x00, 0x00, 0xb8, 0x10, 0xb8, 0x10, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x01, 0x00, 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0x01, 0x23,
            0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0xe7, 0x03, 0x00, 0x00, 0xfe, 0xdc, 0xba, 0x98,
            0x76, 0x54, 0x32, 0x10, 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0xe7, 0x03,
            0x00, 0x00,
        ],
        31337 => vec![
            0xce, 0x63, 0xd1, 0xd2, 0x16, 0xe7, 0x13, 0xcf, 0x38, 0xa5, 0xa5, 0x86, 0xb2, 0x75,
            0x4b, 0x99, 0xaa, 0x32, 0x58,
        ],
        1039 => vec![
            0x05, 0x00, 0x0b, 0x03, 0x10, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x01, 0x00,
            0x00, 0x00, 0xb8, 0x10, 0xb8, 0x10, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x01, 0x00, 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0x01, 0x23,
            0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0xe7, 0x03, 0x00, 0x00, 0xfe, 0xdc, 0xba, 0x98,
            0x76, 0x54, 0x32, 0x10, 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0xe7, 0x03,
            0x00, 0x00,
        ],
        5353 | 26198 => vec![
            0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ],
        69 => vec![
            0x00, 0x01, 0x72, 0x37, 0x74, 0x66, 0x70, 0x2e, 0x74, 0x78, 0x74, 0x00, 0x00, 0x6f,
            0x63, 0x74, 0x65, 0x74, 0x00,
        ],
        2049 | 4045 | 32768..=65535 => vec![
            0x3e, 0xec, 0xe3, 0xca, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0xbc,
            0x61, 0x4e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ],
        135 | 1025..=1199 => vec![
            0x05, 0x00, 0x0b, 0x03, 0x10, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x01, 0x00,
            0x00, 0x00, 0xb8, 0x10, 0xb8, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
            0x00, 0x00, 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0x01, 0x23, 0x45, 0x67,
            0x89, 0xab, 0xcd, 0xef, 0xe7, 0x03, 0x00, 0x00, 0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54,
            0x32, 0x10, 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0xe7, 0x03, 0x00, 0x00,
        ],
        177 => vec![0x00, 0x01, 0x00, 0x02, 0x00, 0x01, 0x00],
        427 => vec![
            0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x3a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
            0x65, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x00, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75,
            0x6c, 0x74, 0x00, 0x00, 0x00, 0x00,
        ],
        853 | 3391 | 4433 | 4740 | 5349 | 5684 | 5868 | 6514 | 6636 | 8232 | 10161 | 10162
        | 12346 | 12446 | 12546 | 12646 | 12746 | 12846 | 12946 | 13046 => vec![
            0x16, 0xfe, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x01,
            0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0xfe, 0xfd, 0x00,
            0x00, 0x00, 0x00, 0x7c, 0x77, 0x40, 0x1e, 0x8a, 0xc8, 0x22, 0xa0, 0xa0, 0x18, 0xff,
            0x93, 0x08, 0xca, 0xac, 0x0a, 0x64, 0x2f, 0xc9, 0x22, 0x64, 0xbc, 0x08, 0xa8, 0x16,
            0x89, 0x19, 0x3f, 0x00, 0x00, 0x00, 0x02, 0x00, 0x2f, 0x01, 0x00,
        ],
        4500 => vec![
            0xb0, 0x38, 0x10, 0x9e, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
            0x10, 0x02, 0x00,
        ],
        520 => vec![
            0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10,
        ],
        626 => vec![
            0x53, 0x4E, 0x51, 0x55, 0x45, 0x52, 0x59, 0x3A, 0x20, 0x31, 0x32, 0x37, 0x2E, 0x30,
            0x2E, 0x30, 0x2E, 0x31, 0x3A, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x3A, 0x78, 0x73,
            0x76, 0x72,
        ],
        623 => vec![0x80, 0x00, 0x00, 0x00],
        1194 => vec![
            0x38, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,
        ],
        1604 => vec![
            0x1e, 0x00, 0x01, 0x30, 0x02, 0xfd, 0xa8, 0xe3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00,
        ],
        1645 | 1812 => vec![
            0x01, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ],
        1701 => vec![
            0xc8, 0x02, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x08,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x08, 0x00, 0x00, 0x00, 0x02, 0x01, 0x00,
            0x80, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x6e, 0x78, 0x70, 0x2d, 0x73, 0x63, 0x61, 0x6e,
            0x80, 0x0a, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x80, 0x08, 0x00, 0x00,
            0x00, 0x09, 0x00, 0x00,
        ],
        2123 | 2152 => vec![
            0x32, 0x01, 0x00, 0x04, 0x00, 0x00, 0x42, 0x00, 0x13, 0x37, 0x00, 0x00,
        ],
        3386 => vec![0x4e, 0x01, 0x00, 0x04, 0xde, 0xfe, 0xc8, 0x00],
        2302 => vec![
            0x00, 0x02, 0xf1, 0x26, 0x01, 0x26, 0xf0, 0x90, 0xa6, 0xf0, 0x26, 0x57, 0x4e, 0xac,
            0xa0, 0xec, 0xf8, 0x68, 0xe4, 0x8d, 0x21,
        ],
        3283 => vec![0x00, 0x14, 0x00, 0x01, 0x03],
        6481 => vec![
            0x5b, 0x50, 0x52, 0x4f, 0x42, 0x45, 0x5d, 0x20, 0x30, 0x30, 0x30, 0x30,
        ],
        5683 => vec![
            0x40, 0x01, 0x01, 0xce, 0xbb, 0x2e, 0x77, 0x65, 0x6c, 0x6c, 0x2d, 0x6b, 0x6e, 0x6f,
            0x77, 0x6e, 0x04, 0x63, 0x6f, 0x72, 0x65,
        ],
        7777 => vec![0x4e, 0x6f, 0x6e, 0x65, 0x00],
        10001 => vec![0x01, 0x00, 0x00, 0x00],
        10080 => vec![
            0x41, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x20, 0x32, 0x2e, 0x36, 0x20, 0x52, 0x45, 0x51,
            0x20, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x20, 0x30, 0x30, 0x30, 0x2d, 0x30, 0x30,
            0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x53, 0x45, 0x51, 0x20, 0x30, 0x0a, 0x53,
            0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x20, 0x6e, 0x6f, 0x6f, 0x70, 0x0a,
        ],
        17185 => vec![
            0x72, 0x37, 0x72, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x55, 0x55,
            0x55, 0x55, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
            0x55, 0x10, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ],
        27910..=27914 => vec![0xff, 0xff, 0xff, 0xff, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73],
        26000..=26004 | 27960..=27964 | 30720..=30724 | 44400 => {
            vec![0xff, 0xff, 0xff, 0xff, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73]
        }
        64738 => vec![
            0x00, 0x00, 0x00, 0x00, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68,
        ],
        3784 => vec![
            0x01, 0xe7, 0xe5, 0x75, 0x31, 0xa3, 0x17, 0x0b, 0x21, 0xcf, 0xbf, 0x2b, 0x99, 0x4e,
            0xdd, 0x19, 0xac, 0xde, 0x08, 0x5f, 0x8b, 0x24, 0x0a, 0x11, 0x19, 0xb6, 0x73, 0x6f,
            0xad, 0x28, 0x13, 0xd2, 0x0a, 0xb9, 0x12, 0x75,
        ],
        4665 | 4666 | 4672 | 6429 => vec![0xE4, 0x60],
        8767 => vec![
            0xf4, 0xbe, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
            0x00, 0x00, 0x32, 0x78, 0xba, 0x85, 0x09, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x70, 0x65,
            0x61, 0x6b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x57, 0x69, 0x6e, 0x64, 0x6f,
            0x77, 0x73, 0x20, 0x58, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
            0x20, 0x00, 0x3c, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x6e, 0x69, 0x63,
            0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ],
        9987 => vec![
            0x54, 0x53, 0x33, 0x49, 0x4E, 0x49, 0x54, 0x31, 0x00, 0x65, 0x00, 0x00, 0x88, 0x0A,
            0x39, 0x7B, 0x0F, 0x00, 0x5B, 0x55, 0x72, 0xEF, 0xDC, 0x78, 0x32, 0x6B, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ],
        27015..=27030 => vec![
            0xFF, 0xFF, 0xFF, 0xFF, 0x54, 0x53, 0x6F, 0x75, 0x72, 0x63, 0x65, 0x20, 0x45, 0x6E,
            0x67, 0x69, 0x6E, 0x65, 0x20, 0x51, 0x75, 0x65, 0x72, 0x79, 0x00,
        ],
        27444 => vec![
            0x70, 0x6E, 0x67, 0x20, 0x6C, 0x34, 0x34, 0x61, 0x64, 0x73, 0x6C,
        ],
        31337 => vec![
            0xce, 0x63, 0xd1, 0xd2, 0x16, 0xe7, 0x13, 0xcf, 0x38, 0xa5, 0xa5, 0x86, 0xb2, 0x75,
            0x4b, 0x99, 0xaa, 0x32, 0x58,
        ],
        34555 => vec![0x70, 0x6E, 0x67, 0x20, 0x5B, 0x5D, 0x2E, 0x2E, 0x4B, 0x73],
        48899 => vec![
            0x03, 0x66, 0x14, 0x71, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x01, 0x01, 0x10, 0x27, 0x00, 0x00, 0x00, 0x00,
        ],
        30718 => vec![0x00, 0x00, 0x00, 0xf8],
        88 => vec![0x01, 0x01, 0x05, 0x02, 0x00, 0x00, 0x00, 0x00],
        554 => vec![0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00],
        5060 => vec![0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00],
        161 => b"\x30\x3a\x02\x01\x03\x30\x0f\x02\x02\x4a\x69\x02\x03\x00\xff\xe3\x04\x01\x04\x02\x01\x03\x04\x10\x30\x0e\x04\x00\x02\x01\x00\x02\x01\x00\x04\x00\x04\x00\x04\x00\x30\x12\x04\x00\x04\x00\xa0\x0c\x02\x02\x37\xf0\x02\x01\x00\x02\x01\x00\x30\x00".to_vec(),

        _ => vec![0x00],
    };
    if let Ok(socket) = UdpSocket::bind("0.0.0.0:0").await {
        if let Err(e) = socket.send_to(&payload, format!("{}:{}", target, port)).await {
            println!("Error sending packet: {}", e);
            return Some(0);
        }

        let mut buffer = [0u8; 1024];
        if let Ok(response) = timeout(Duration::from_secs(5), socket.recv_from(&mut buffer)).await {
            match response {
                Ok((response_size, _)) => {
                    let response = &buffer[..response_size];
                    if !response.is_empty() {
                        //let capture: String = response.iter().map(|byte| *byte as char).collect();
                        println!("{:?}", std::str::from_utf8(response));
                        return Some(port);
                    } else {
                        return Some(0);
                    }
                }
                Err(_) => {
                    // Handle timeout error if needed
                    // For now, returning None as a closed port
                    return Some(0);
                }
            }
        }
    }

    Some(0)
}

pub async fn scan_ports(target: Ipv4Addr, concorrency: usize) -> Vec<u16> {
    let open_ports = Arc::new(Mutex::new(Vec::<u16>::new()));

    let ports = &[
        28017, 53, 30718, 88, 67, 554, 19, 427, 177, 135, 4045, 64738, 26000, 27444, 31337, 9987,
        26001, 26002, 26003, 26004, 3784, 80, 4665, 4666, 4672, 6429, 137, 9987, 8767, 7, 3386,
        3283, 5683, 17185, 2302, 10080, 10001, 7777, 1434, 626, 10080, 3391, 5060, 2152, 2123,
        1701, 1645, 1812, 853, 1604, 31337, 623, 1194, 1039, 161, 1090, 123, 500, 389, 111, 1123,
        5093, 5353, 12311, 427, 30120, 1900, 37810, 5632, 27015, 27030, 6881, 18753, 53413, 5351,
        41794, 3478, 8088, 37833, 18753, 1900, 1901, 11211, 27666, 520, 1101, 1045, 27960, 27961,
        27962, 27963, 27964, 30720, 30721, 30722, 30723, 30724, 44400, 27910, 27911, 27912, 27913,
        27914, 27015, 27016, 27017, 27018, 27019, 27020, 27021, 27022, 27023, 27024, 27025, 27026,
        27027, 27028, 27029, 27030,
    ];
    let pb = Arc::new(ProgressBar::new(ports.len() as u64));
    pb.set_style(
        ProgressStyle::default_bar()
            .template("[{elapsed_precise}] [{wide_bar}] {pos}/{len} ({percent}%)")
            .expect("REASON")
            .progress_chars("UDP> "),
    );
    let pb_clone = pb.clone();
    let mut tasks = futures::stream::iter(ports.iter().copied())
        .map(|port| {
            let pb = pb_clone.clone();
            let target = target;
            let open_ports = Arc::clone(&open_ports);
            tokio::spawn(async move {
                let result = udp_scan(target, port).await;
                pb.inc(1);
                if let Some(open_port) = result {
                    if open_port != 0 {
                        open_ports.lock().unwrap().push(open_port);
                    }
                }
            })
        })
        .buffer_unordered(concorrency)
        .collect::<Vec<_>>()
        .await;

    for result in tasks.drain(..) {
        if let Ok(open_port) = result {
            println!("{:?}", open_port);
        }
    }
    println!("UDP SHT {:?}", open_ports);
    Arc::try_unwrap(open_ports).ok().unwrap().into_inner().unwrap()
}
